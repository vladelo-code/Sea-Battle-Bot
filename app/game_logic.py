import random
from typing import List, Tuple, Optional, Set

# –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
BOARD_SIZE = 10

DIRECTIONS_8 = [(-1, -1), (-1, 0), (-1, 1),  # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
                (0, -1), (0, 1),  # –õ–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è —è—á–µ–π–∫–∏
                (1, -1), (1, 0), (1, 1)]  # –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞

Board = List[List[str]]


def create_empty_board() -> Board:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–º BOARD_SIZE x BOARD_SIZE.
    """
    return [["‚¨ú" for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]


def print_board(board: Board, hide_ships: bool = False) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param hide_ships: –ï—Å–ª–∏ True, —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –ø–æ–ª–µ.
    """
    letters = "ABCDEFGHIJ"
    header = "  1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü"
    rows = []

    for i, row in enumerate(board):
        line = []
        for cell in row:
            if hide_ships and cell == "üö¢":
                line.append("‚¨ú")
            elif cell in {"üö¢", "‚ùå", "üí•"}:
                line.append(cell)
            else:
                line.append("‚¨ú")
        rows.append(f"{letters[i]} " + " ".join(line))

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–æ–Ω–æ—à–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ —Ä–æ–≤–Ω–æ
    return "<code>\n" + header + "\n" + "\n".join(rows) + "\n</code>"


def place_ship(board: Board, x: int, y: int, size: int, orientation: str) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–∞ –ø–æ–ª–µ.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param x: –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ X.
    :param y: –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ Y.
    :param size: –†–∞–∑–º–µ—Ä –∫–æ—Ä–∞–±–ª—è.
    :param orientation: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('horizontal' –∏–ª–∏ 'vertical').
    :return: True, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ; –∏–Ω–∞—á–µ False.
    """
    if orientation == "horizontal":
        if y + size > BOARD_SIZE:
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
        for i in range(size):
            if board[x][y + i] != "‚¨ú" or not is_valid_position(board, x, y + i):
                return False
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å
        for i in range(size):
            board[x][y + i] = "üö¢"
    else:
        if x + size > BOARD_SIZE:
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
        for i in range(size):
            if board[x + i][y] != "‚¨ú" or not is_valid_position(board, x + i, y):
                return False
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å
        for i in range(size):
            board[x + i][y] = "üö¢"
    return True


def place_all_ships(board: Board) -> None:
    """
    –†–∞–∑–º–µ—â–∞–µ—Ç –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –ø–æ–ª–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    """
    ship_sizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
    for size in ship_sizes:
        placed = False
        while not placed:
            x = random.randint(0, BOARD_SIZE - 1)
            y = random.randint(0, BOARD_SIZE - 1)
            orientation = random.choice(["horizontal", "vertical"])
            placed = place_ship(board, x, y, size, orientation)


def is_valid_position(board: Board, x: int, y: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ—Ç –ª–∏ –∫–æ—Ä–∞–±–ª–µ–π –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö (–≤–∫–ª—é—á–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏).

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    :return: True, –µ—Å–ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ; –∏–Ω–∞—á–µ False.
    """
    for dx, dy in DIRECTIONS_8:
        nx, ny = x + dx, y + dy
        if 0 <= nx < BOARD_SIZE and 0 <= ny < BOARD_SIZE:
            if board[nx][ny] == "üö¢":
                return False
    return True


def mark_surrounding(board: Board, x: int, y: int) -> None:
    """
    –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    """
    for dx, dy in DIRECTIONS_8:
        nx, ny = x + dx, y + dy
        if 0 <= nx < BOARD_SIZE and 0 <= ny < BOARD_SIZE and board[nx][ny] == "‚¨ú":
            board[nx][ny] = "‚ùå"


def is_ship_destroyed(board: Board, x: int, y: int, visited: Optional[Set[Tuple[int, int]]] = None) -> Tuple[
    bool, List[Tuple[int, int]]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å, –Ω–∞—á–∏–Ω–∞—è —Å –∫–ª–µ—Ç–∫–∏ (x, y).

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    :param visited: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫.
    :return: –ö–æ—Ä—Ç–µ–∂ (—É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏, —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Å–µ—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –∫–æ—Ä–∞–±–ª—è).
    """
    if visited is None:
        visited = set()
    if (x, y) in visited or board[x][y] != "üí•":
        return True, []  # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞

    visited.add((x, y))
    ship_cells = [(x, y)]
    destroyed = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ)
    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        nx, ny = x + dx, y + dy
        if 0 <= nx < BOARD_SIZE and 0 <= ny < BOARD_SIZE:
            if board[nx][ny] == "üö¢":
                return False, []  # –ö–æ—Ä–∞–±–ª—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
            if board[nx][ny] == "üí•" and (nx, ny) not in visited:
                sub_destroyed, sub_cells = is_ship_destroyed(board, nx, ny, visited)
                destroyed = destroyed and sub_destroyed
                ship_cells.extend(sub_cells)

    return destroyed, ship_cells


def handle_ship_destruction(board: Board, x: int, y: int) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è X.
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è Y.
    """
    destroyed, ship_cells = is_ship_destroyed(board, x, y)
    if destroyed:
        for sx, sy in ship_cells:
            mark_surrounding(board, sx, sy)


def process_shot(board: Board, x: int, y: int) -> Optional[bool]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X.
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y.
    :return: True ‚Äî –ø–æ–ø–∞–¥–∞–Ω–∏–µ, False ‚Äî –ø—Ä–æ–º–∞—Ö, None ‚Äî –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥.
    """
    if board[x][y] == "üö¢":
        board[x][y] = "üí•"
        handle_ship_destruction(board, x, y)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
        return True
    elif board[x][y] == "‚¨ú":
        board[x][y] = "‚ùå"
        return False
    return None


def check_victory(board: Board) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –ø–æ–ª–µ.

    :param board: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
    :return: True, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∞ (–∫–æ—Ä–∞–±–ª–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å); –∏–Ω–∞—á–µ False.
    """
    for row in board:
        if "üö¢" in row:
            return False
    return True
