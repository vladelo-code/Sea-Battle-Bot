from aiogram import Dispatcher
from aiogram.types import CallbackQuery

from app.keyboards import bot_difficulty_menu, playing_menu, main_menu
from app.logger import setup_logger
from app.state.in_memory import games
from app.services.bot_game_service import start_bot_game
from app.messages.texts import YOUR_BOARD_TEXT, START_BOT_GAME, STARTING_GAME_ERROR, INVALID_DIFFICULT_MODE
from app.dependencies import db_session
from app.db_utils.donor import is_donor

logger = setup_logger(__name__)


async def play_vs_bot_menu_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

    Args:
        callback (CallbackQuery): –æ–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.

    Returns:
        None
    """
    try:
        await callback.answer()
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–Ω–æ—Ä–∞
    with db_session() as db:
        donor_status = is_donor(db, callback.from_user.id)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = bot_difficulty_menu(is_donor=donor_status)
    
    await callback.message.edit_text(START_BOT_GAME, parse_mode='HTML', reply_markup=keyboard)


async def start_bot_game_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º.
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.
    3. –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ start_bot_game.
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤.

    Args:
        callback (CallbackQuery): –æ–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

    Returns:
        None
    """
    try:
        await callback.answer()
    except Exception:
        pass

    user_id = callback.from_user.id
    username = callback.from_user.username

    difficulty = {
        "bot_easy": "easy",
        "bot_medium": "medium",
        "bot_hard": "hard",
        "bot_super_hard": "super_hard",
    }.get(callback.data)

    if not difficulty:
        await callback.message.edit_text(INVALID_DIFFICULT_MODE, reply_markup=main_menu())
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–≥—Ä–µ
    for gid, g in games.items():
        if user_id == g.get("player1") or user_id == g.get("player2"):
            # –µ—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è PvP (–æ–±–∞ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å) ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–ø—É—Å–∫
            if g.get("is_bot_game") or (g.get("player1") and g.get("player2")):
                logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –±–æ—Ç–æ–º, –∏–º–µ—è –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É {gid}.")
                await callback.message.edit_text(STARTING_GAME_ERROR, reply_markup=main_menu())
                return

    # –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º PvP-–∏–≥—Ä—ã –±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    to_delete = [gid for gid, g in games.items() if g.get("player1") == user_id and not g.get("player2") and not g.get("is_bot_game")]
    for gid in to_delete:
        games.pop(gid, None)

    game_id = start_bot_game(user_id=user_id, username=username, difficulty=difficulty)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –ø–æ –±–æ—Ç—É
    await callback.message.edit_text(
        YOUR_BOARD_TEXT.format(
            board=__import__('app.game_logic', fromlist=['print_board']).print_board(
                games[game_id]["boards"][user_id]
            )
        ),
        parse_mode="HTML"
    )

    await callback.bot.send_message(
        user_id,
        "üéØ –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!",
        reply_markup=playing_menu(game_id, games[game_id]["bot_id"])
    )


def register_handler(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º:
    - play_vs_bot_menu_callback ‚Äî –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
    - start_bot_game_callback ‚Äî –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

    Args:
        dp (Dispatcher): –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ Aiogram.

    Returns:
        None
    """
    dp.callback_query.register(play_vs_bot_menu_callback, lambda c: c.data == "play_vs_bot")
    dp.callback_query.register(start_bot_game_callback, lambda c: c.data in {"bot_easy", "bot_medium", "bot_hard", "bot_super_hard"})
