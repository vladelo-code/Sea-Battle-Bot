from aiogram import Dispatcher
from aiogram.types import CallbackQuery, PreCheckoutQuery, Message, LabeledPrice

from app.keyboards import donation_menu, back_to_main_menu, donation_cancel_keyboard
from app.dependencies import db_session
from app.db_utils.player import get_or_create_player
from app.db_utils.donor import is_donor, handle_donation
from app.messages.texts import (DONATION_MENU, DONATION_MENU_ALREADY_DONOR,
                                DONATION_SUCCESS, DONATION_ERROR, PROCESS_PAYMENT, DONATION_CANCELLED)
from app.logger import setup_logger

logger = setup_logger("donation")


async def donation_menu_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –¥–æ–Ω–∞—Ç–∞.
    """
    logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –≤–æ—à–µ–ª –≤ –º–µ–Ω—é –¥–æ–Ω–∞—Ç–∞!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–Ω–æ—Ä–∞
    with db_session() as db:
        donor_status = is_donor(db, callback.from_user.id)

    text = DONATION_MENU_ALREADY_DONOR if donor_status else DONATION_MENU

    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=donation_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ donation_menu_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def donate_50_stars_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –¥–æ–Ω–∞—Ç–∞ 50 –∑–≤—ë–∑–¥.
    """
    try:
        logger.info(f"üí´ @{callback.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–Ω–∞—Ç 50 ‚≠ê")

        # 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é: {e}")

        # 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        invoice_message = await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title="üíé –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ú–æ—Ä—Å–∫–æ–π –±–æ–π¬ª",
            description="–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!",
            payload="donation_1_star",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label="–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–Ω–∞—Ç", amount=1)],
            start_parameter="donation_1_star",
        )

        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=PROCESS_PAYMENT,
            parse_mode="HTML",
            reply_markup=donation_cancel_keyboard(invoice_message)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ donate_50_stars_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cancel_invoice_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–æ–Ω–∞—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        invoice_msg_id = int(callback.data.replace("cancel_invoice_", ""))

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º
        await callback.bot.delete_message(callback.from_user.id, invoice_msg_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=DONATION_CANCELLED,
            parse_mode="HTML",
            reply_markup=back_to_main_menu()
        )

        logger.info(f"üòî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –æ—Ç–º–µ–Ω–∏–ª –∏–Ω–≤–æ–π—Å ‚Ññ{invoice_msg_id}")

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø–ª–∞—Ç–µ–∂
        if pre_checkout_query.invoice_payload == "donation_1_stars":
            await pre_checkout_query.bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=True
            )
        else:
            await pre_checkout_query.bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout_query_handler: {e}")
        await pre_checkout_query.bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        )


async def successful_payment_handler(message: Message) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–ª—é–±–æ–π —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞).
    """
    try:
        payload = message.successful_payment.invoice_payload
        if not payload.startswith("donation_"):
            return

        stars_amount = int(payload.replace("donation_", "").replace("_stars", ""))

        with db_session() as db:
            player = get_or_create_player(db, str(message.from_user.id), message.from_user.username)
            handle_donation(db, player, stars_amount, message.successful_payment.date)

        await message.answer(DONATION_SUCCESS, parse_mode="HTML", reply_markup=back_to_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å—Ç–∞–ª –¥–æ–Ω–æ—Ä–æ–º ({stars_amount} ‚≠ê)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ successful_payment_handler: {e}")
        await message.answer(DONATION_ERROR, parse_mode="HTML", reply_markup=back_to_main_menu())


def register_handler(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–Ω–∞—Ç–∞.
    """
    dp.callback_query.register(donation_menu_callback, lambda c: c.data == "donation_menu")
    dp.callback_query.register(donate_50_stars_callback, lambda c: c.data == "donate_50_stars")
    dp.callback_query.register(cancel_invoice_callback, lambda c: c.data.startswith("cancel_invoice_"))
    dp.pre_checkout_query.register(pre_checkout_query_handler)
    dp.message.register(successful_payment_handler, lambda m: m.successful_payment is not None)
