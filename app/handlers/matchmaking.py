from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardRemove
import asyncio

from app.services.matchmaking_service import try_create_game, try_join_game
from app.game_logic import print_board
from app.keyboards import connect_menu, playing_menu, current_game_menu
from app.state.in_memory import user_game_requests, games
from app.utils.game_cleanup import remove_game_if_no_join
from app.logger import setup_logger

from app.messages.texts import (
    STARTING_GAME, STARTING_GAME_ERROR, CHOOSE_CONNECTING_GAME, JOIN_CONNECTING_GAME_ERROR,
    CREATE_GAME_ERROR_MESSAGE, GAME_NOT_FOUND, INVALID_GAME_DATA, SUCCESSFULLY_JOINED,
    PLAYER1_GAME_START, PLAYER2_GAME_START, YOUR_BOARD_TEXT
)

logger = setup_logger(__name__)


async def create_game_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫.

    :param message: –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –∏–≥—Ä–µ
    if not any(user_id == games[g]["player1"] or user_id == games[g]["player2"] for g in games):
        try:
            game_id = try_create_game(user_id, username)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã –¥–ª—è @{username}: {e}")
            await message.answer(CREATE_GAME_ERROR_MESSAGE)
            return

        logger.info(f"üöÄ –ò–≥—Ä–æ–∫ @{username} —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É, ID –∏–≥—Ä—ã: {game_id}")
        user_game_requests[user_id] = None  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É –∏ –∂–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        asyncio.create_task(remove_game_if_no_join(game_id))

        await message.answer(STARTING_GAME.format(game_id=game_id), reply_markup=connect_menu())
    else:
        logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –∏–≥—Ä—É, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é.")
        await message.answer(STARTING_GAME_ERROR)


async def process_game_id(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ "üìé –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.

    :param message: –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_game_requests[message.from_user.id] = None
    await message.answer(CHOOSE_CONNECTING_GAME, reply_markup=current_game_menu())


async def join_game_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É ID.
    –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–ª—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id.

    :param message: –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    username = message.from_user.username
    game_id = message.text

    result = try_join_game(game_id, user_id, username)

    if result == "same_game":
        logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∂–µ –∏–≥—Ä–µ —Å ID: {game_id}")
        await message.answer(JOIN_CONNECTING_GAME_ERROR, reply_markup=current_game_menu())

    elif result == "not_found":
        await message.answer(GAME_NOT_FOUND.format(game_id=game_id))

    elif result == "invalid":
        await message.answer(INVALID_GAME_DATA)

    elif isinstance(result, dict) and result.get("status") == "joined":
        user_game_requests.pop(user_id, None)
        player1 = result["player1"]
        player2 = result["player2"]
        second_player_username = games[game_id]["usernames"].get(player2)

        logger.info(f"‚ûï –ò–≥—Ä–æ–∫ @{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ, ID –∏–≥—Ä—ã: {game_id}")
        await message.answer(SUCCESSFULLY_JOINED.format(game_id=game_id))
        await message.bot.send_message(player1, PLAYER1_GAME_START.format(username=username), parse_mode="html",
                                       reply_markup=ReplyKeyboardRemove())
        await message.bot.send_message(player2, PLAYER2_GAME_START.format(username=second_player_username),
                                       parse_mode="html",
                                       reply_markup=ReplyKeyboardRemove())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É 1 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        msg1 = await message.bot.send_message(
            player1,
            YOUR_BOARD_TEXT.format(board=print_board(games[game_id]["boards"][player1])),
            parse_mode="html",
            reply_markup=playing_menu(game_id, player2)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É 2 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        msg2 = await message.bot.send_message(
            player2,
            YOUR_BOARD_TEXT.format(board=print_board(games[game_id]["boards"][player2])),
            parse_mode="html",
            reply_markup=playing_menu(game_id, player1)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç—å
        games[game_id]["message_ids"] = {
            player1: msg1.message_id,
            player2: msg2.message_id,
        }


def register_handler(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
    - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∏–≥—Ä—ã
    """
    dp.message.register(create_game_command, lambda m: m.text == "üöÄ –ù–æ–≤–∞—è –∏–≥—Ä–∞")
    dp.message.register(process_game_id, lambda m: m.text in ("üìé –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", "üîÉ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä"))
    dp.message.register(join_game_command, lambda m: m.text and m.text.isalnum() and len(m.text) == 6)
