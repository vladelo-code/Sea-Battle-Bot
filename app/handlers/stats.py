from aiogram import Dispatcher
from aiogram.types import CallbackQuery

from app.keyboards import rating_menu, back_to_main_menu, profile_menu
from app.logger import setup_logger
from app.db_utils.stats import get_top_and_bottom_players
from app.db_utils.player import get_player_by_telegram_id, get_extended_stats
from app.dependencies import db_session

from app.messages.texts import (
    STATS_TEMPLATE,
    NO_STATS_MESSAGE,
    NOT_REGISTERED_MESSAGE,
    EMPTY_LEADERBOARD_MESSAGE,
    LEADERBOARD_HEADER,
    LEADERBOARD_ROW,
    UNKNOWN_USERNAME_FIRST,
    ELO_INFO,
)

logger = setup_logger(__name__)


async def stats_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await callback.answer()
    except Exception:
        pass

    username = callback.from_user.username
    with db_session() as db:
        player = get_player_by_telegram_id(db, str(callback.from_user.id))
        if not player:
            logger.info(f"üìä –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –±—É–¥—É—á–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º.")
            await callback.message.edit_text(NOT_REGISTERED_MESSAGE, reply_markup=back_to_main_menu())
            return

        stats = get_extended_stats(db, str(callback.from_user.id))
        if not stats:
            logger.info(f"üìä –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å—ã–≥—Ä–∞–≤.")
            await callback.message.edit_text(NO_STATS_MESSAGE, reply_markup=back_to_main_menu())
            return

        logger.info(f"üìä –ò–≥—Ä–æ–∫ @{username} –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

        await callback.message.edit_text(
            STATS_TEMPLATE.format(
                donor='–æ—Ç–∫—Ä—ã—Ç—ã' if stats.get("is_donor", False) else '–∑–∞–∫—Ä—ã—Ç—ã',
                games_played=stats["games_played"],
                wins=stats["wins"],
                losses=stats["losses"],
                rating=stats["rating"],
                place=stats["place"],
                total_players=stats["total_players"],
                first_seen=stats["first_seen"].strftime("%d.%m.%Y"),
                avg_time=int(stats["avg_time"] // 60),
                total_time=int(stats["total_time"] // 60),
            ),
            parse_mode='HTML',
            reply_markup=profile_menu()
        )


async def leaderboard_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ —Ç–æ–ø-–ª–∏–¥–µ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.
    –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é.

    :param callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await callback.answer()
    except Exception:
        pass

    username = callback.from_user.username
    with db_session() as db:
        top_players, bottom_players, total_players, current_user_position = get_top_and_bottom_players(
            db, current_user_id=str(callback.from_user.id)
        )

        if not top_players:
            logger.info(f"ü•á –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –Ω–æ –æ–Ω –ø—É—Å—Ç.")
            await callback.message.edit_text(EMPTY_LEADERBOARD_MESSAGE, reply_markup=back_to_main_menu())
            return

        text = LEADERBOARD_HEADER
        for i, (player_username, rating, _, is_donor) in enumerate(top_players, 1):
            donor_badge = "üíé" if is_donor else ""
            name = f"@{player_username}" if player_username else UNKNOWN_USERNAME_FIRST
            name_with_badge = f"{donor_badge} {name}".strip()
            text += LEADERBOARD_ROW.format(index=i, username=name_with_badge, rating=rating)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ç–æ–ø–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
        if current_user_position:
            user_username, user_rating, user_position, user_is_donor = current_user_position
            donor_badge = "üíé" if user_is_donor else ""
            name = f"@{user_username}" if user_username else UNKNOWN_USERNAME_FIRST
            name_with_badge = f"{donor_badge} {name}".strip()
            text += "...\n"
            text += LEADERBOARD_ROW.format(index=user_position, username=name_with_badge, rating=user_rating)
            text += "...\n"
        else:
            text += "...\n"

        start_index = total_players - len(bottom_players) + 1
        for i, (player_username, rating, _, is_donor) in enumerate(bottom_players, start_index):
            donor_badge = "üíé" if is_donor else ""
            name = f"@{player_username}" if player_username else UNKNOWN_USERNAME_FIRST
            name_with_badge = f"{donor_badge} {name}".strip()
            text += LEADERBOARD_ROW.format(index=i, username=name_with_badge, rating=rating)

        # text += LEADERBOARD_FOOTER.format(total_players=total_players)

        logger.info(f"ü•á –ò–≥—Ä–æ–∫ @{username} –ø–æ–ª—É—á–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤.")
        await callback.message.edit_text(text, parse_mode='html', reply_markup=rating_menu())


async def get_elo_explanation_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ Elo.

    :param callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        await callback.answer()
    except Exception:
        pass

    username = callback.from_user.username
    logger.info(f"‚ÑπÔ∏è –ò–≥—Ä–æ–∫ @{username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
    await callback.message.edit_text(ELO_INFO, parse_mode="html", reply_markup=back_to_main_menu())


def register_handler(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è Elo.

    :param dp: –≠–∫–∑–µ–º–ø–ª—è—Ä Dispatcher –∏–∑ aiogram.
    """
    dp.callback_query.register(stats_callback, lambda c: c.data == "my_profile")
    dp.callback_query.register(leaderboard_callback, lambda c: c.data == "rating")
    dp.callback_query.register(get_elo_explanation_callback, lambda c: c.data == "about_rating")
