from aiogram import Dispatcher
from aiogram.types import Message

from app.keyboards import main_menu, rating_menu
from app.logger import setup_logger
from app.db_utils.stats import get_stats, get_top_and_bottom_players
from app.db_utils.player import get_player_by_telegram_id
from app.dependencies import db_session

from app.messages.texts import (
    STATS_HEADER,
    STATS_TEMPLATE,
    NO_STATS_MESSAGE,
    NOT_REGISTERED_MESSAGE,
    EMPTY_LEADERBOARD_MESSAGE,
    LEADERBOARD_HEADER,
    LEADERBOARD_ROW,
    UNKNOWN_USERNAME_FIRST,
    ELO_INFO,
)

logger = setup_logger(__name__)


async def stats_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Message.
    """
    username = message.from_user.username
    with db_session() as db:
        player = get_player_by_telegram_id(db, str(message.from_user.id))
        if not player:
            logger.info(f"üìä –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –±—É–¥—É—á–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º.")
            await message.answer(NOT_REGISTERED_MESSAGE)
            return

        stats = get_stats(db, message.from_user.id)
        if not stats:
            logger.info(f"üìä –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å—ã–≥—Ä–∞–≤.")
            await message.answer(NO_STATS_MESSAGE)
            return

        logger.info(f"üìä –ò–≥—Ä–æ–∫ @{username} –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        await message.answer(
            STATS_HEADER + STATS_TEMPLATE.format(
                games_played=stats.games_played,
                wins=stats.wins,
                losses=stats.losses,
                rating=stats.rating,
            ),
            parse_mode='HTML',
        )


async def leaderboard_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ —Ç–æ–ø-–ª–∏–¥–µ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Message.
    """
    username = message.from_user.username
    with db_session() as db:
        top_players, bottom_players, total_players = get_top_and_bottom_players(db)

        if not top_players:
            logger.info(f"ü•á –ò–≥—Ä–æ–∫ @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –Ω–æ –æ–Ω –ø—É—Å—Ç.")
            await message.answer(EMPTY_LEADERBOARD_MESSAGE)
            return

        text = LEADERBOARD_HEADER
        for i, (player_username, rating) in enumerate(top_players, 1):
            name = f"@{player_username}" if player_username else UNKNOWN_USERNAME_FIRST
            text += LEADERBOARD_ROW.format(index=i, username=name, rating=rating)

        text += "...\n"
        start_index = total_players - len(bottom_players) + 1
        for i, (player_username, rating) in enumerate(bottom_players, start_index):
            name = f"@{player_username}" if player_username else UNKNOWN_USERNAME_FIRST
            text += LEADERBOARD_ROW.format(index=i, username=name, rating=rating)

        logger.info(f"ü•á –ò–≥—Ä–æ–∫ @{username} –ø–æ–ª—É—á–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤.")
        await message.answer(text, parse_mode='html', reply_markup=rating_menu())


async def get_elo_explanation(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ Elo.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Message.
    """
    username = message.from_user.username
    logger.info(f"‚ÑπÔ∏è –ò–≥—Ä–æ–∫ @{username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
    await message.answer(ELO_INFO, parse_mode="html", reply_markup=main_menu())


def register_handler(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è Elo.

    :param dp: –≠–∫–∑–µ–º–ø–ª—è—Ä Dispatcher –∏–∑ aiogram.
    """
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
    dp.message.register(stats_command, lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ 'ü•á –†–µ–π—Ç–∏–Ω–≥'
    dp.message.register(leaderboard_command, lambda message: message.text == "ü•á –†–µ–π—Ç–∏–Ω–≥")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ '‚ÑπÔ∏è –û —Ä–µ–π—Ç–∏–Ω–≥–µ'
    dp.message.register(get_elo_explanation, lambda message: message.text == "‚ÑπÔ∏è –û —Ä–µ–π—Ç–∏–Ω–≥–µ")
