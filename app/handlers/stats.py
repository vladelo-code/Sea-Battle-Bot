from aiogram import Dispatcher, types

from app.keyboards import main_menu, connect_menu, playing_menu, current_game_menu, rating_menu
from app.logger import setup_logger

from app.db_utils.stats import update_stats_after_match, get_stats, get_top_players
from app.db_utils.player import get_or_create_player, get_player_by_telegram_id
from app.dependencies import get_db
from app.messages.texts import ELO_INFO

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger(__name__)


async def stats_command(message: types.Message):
    db_gen = get_db()
    db = next(db_gen)
    try:
        player = get_player_by_telegram_id(db, str(message.from_user.id))
        if not player:
            logger.info(f'üöÄ –ò–≥—Ä–æ–∫ @{message.from_user.username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –±—É–¥—É—á–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º.')
            await message.answer("‚ùó –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        stats = get_stats(db, message.from_user.id)
        if stats:
            logger.info(f'üöÄ –ò–≥—Ä–æ–∫ @{message.from_user.username} –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.')
            await message.answer(
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {stats.games_played}\n"
                f"üèÜ –ü–æ–±–µ–¥: {stats.wins}\n"
                f"üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.losses}\n"
                f"üìà –†–µ–π—Ç–∏–Ω–≥: {stats.rating}"
            )
        else:
            logger.info(f'üöÄ –ò–≥—Ä–æ–∫ @{message.from_user.username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å—ã–≥—Ä–∞–≤.')
            await message.answer("ü§î –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!")
    finally:
        db_gen.close()


async def leaderboard_command(message: types.Message):
    db_gen = get_db()
    db = next(db_gen)
    try:
        top_players = get_top_players(db)

        if not top_players:
            logger.info(f'üöÄ –ò–≥—Ä–æ–∫ @{message.from_user.username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –Ω–æ –æ–Ω –ø—É—Å—Ç.')
            await message.answer("üòî –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
            return

        text = "ü•á –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
        for i, (username, rating) in enumerate(top_players, 1):
            name = f"@{username}" if username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            text += f"{i}. {name} ‚Äî {rating} üèÜ\n"

        logger.info(f'üöÄ –ò–≥—Ä–æ–∫ @{message.from_user.username} –ø–æ–ª—É—á–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤.')
        await message.answer(text, reply_markup=rating_menu())
    finally:
        db_gen.close()


async def get_elo_explanation(message: types.Message):
    logger.info(f'üöÄ –ò–≥—Ä–æ–∫ @{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.')
    await message.answer(ELO_INFO, parse_mode="html", reply_markup=main_menu())


def register_handler(dp: Dispatcher):
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
    dp.message.register(stats_command, lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ 'ü•á –†–µ–π—Ç–∏–Ω–≥'
    dp.message.register(leaderboard_command, lambda message: message.text == "ü•á –†–µ–π—Ç–∏–Ω–≥")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ '‚ÑπÔ∏è –û —Ä–µ–π—Ç–∏–Ω–≥–µ'
    dp.message.register(get_elo_explanation, lambda message: message.text == "‚ÑπÔ∏è –û —Ä–µ–π—Ç–∏–Ω–≥–µ")
