import random
from typing import List, Optional, Tuple

from app.game_logic import BOARD_SIZE

Coordinate = Tuple[int, int]


class BotAI:
    HARD_HIT_PROBABILITY = 0.7  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–∞–±–ª—è—Ö –≤ hard —Ä–µ–∂–∏–º–µ

    def __init__(self, difficulty: str, enemy_board: Optional[List[List[str]]] = None):
        self.difficulty = difficulty  # easy | medium | hard
        self.tried: set[Coordinate] = set()
        self.targets: list[Coordinate] = []  # –∫–ª–µ—Ç–∫–∏ –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è
        self.first_hit: Optional[Coordinate] = None
        self.last_hit: Optional[Coordinate] = None
        self.ship_positions: set[Coordinate] = set()  # –¥–ª—è hard —É—Ä–æ–≤–Ω—è - "–∑–Ω–∞–Ω–∏–µ" –æ –∫–æ—Ä–∞–±–ª—è—Ö
        self.hit_sequence: list[Coordinate] = []  # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        # –î–ª—è medium/hard ‚Äî –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –∫–ª–µ—Ç–∫–∏ –ø–æ ¬´—à–∞—Ö–º–∞—Ç–Ω–æ–π¬ª —Å—Ö–µ–º–µ
        self.checker_cells: list[Coordinate] = [
            (x, y) for x in range(BOARD_SIZE) for y in range(BOARD_SIZE)
            if (x + y) % 2 == 0
        ]
        random.shuffle(self.checker_cells)

        # –î–ª—è hard —É—Ä–æ–≤–Ω—è - "–∑–Ω–∞–µ–º" –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        if difficulty == "hard" and enemy_board is not None:
            self._extract_ship_positions(enemy_board)

    def reset_ship_hunt(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ö–æ—Ç—ã –Ω–∞ –∫–æ—Ä–∞–±–ª—å –ø–æ—Å–ª–µ –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è"""
        self.targets.clear()
        self.first_hit = None
        self.last_hit = None
        self.hit_sequence.clear()

    def _neighbors(self, x: int, y: int) -> List[Coordinate]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ) –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è"""
        res: List[Coordinate] = []
        if x > 0:
            res.append((x - 1, y))
        if x < BOARD_SIZE - 1:
            res.append((x + 1, y))
        if y > 0:
            res.append((x, y - 1))
        if y < BOARD_SIZE - 1:
            res.append((x, y + 1))
        return res

    def _random_untried(self) -> Coordinate:
        """–°–ª—É—á–∞–π–Ω–∞—è –∫–ª–µ—Ç–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏"""
        candidates = [
            (x, y)
            for x in range(BOARD_SIZE)
            for y in range(BOARD_SIZE)
            if (x, y) not in self.tried
        ]
        return random.choice(candidates)

    def _random_checker_untried(self) -> Optional[Coordinate]:
        """–°–ª—É—á–∞–π–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –ø–æ —à–∞—Ö–º–∞—Ç–Ω–æ–π —Å—Ö–µ–º–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏"""
        for coord in list(self.checker_cells):
            if coord not in self.tried:
                return coord
        return None

    def choose_shot(self) -> Coordinate:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–ª–µ—Ç–∫—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        # Easy —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã, –Ω–∏–∫–∞–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if self.difficulty == "easy":
            return self._random_untried()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª–∏ –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è ‚Äî –±—å–µ–º —Ç—É–¥–∞ (–¥–ª—è medium/hard)
        if self.targets:
            return self.targets.pop(0)

        # Hard ‚Äî —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é HARD_HIT_PROBABILITY "–∑–Ω–∞–µ–º" –≥–¥–µ –∫–æ—Ä–∞–±–ª—å
        if self.difficulty == "hard" and random.random() < self.HARD_HIT_PROBABILITY:
            known_ship = self._get_known_ship_position()
            if known_ship is not None:
                return known_ship

        # medium/hard ‚Äî —à–∞—Ö–º–∞—Ç–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        if self.difficulty in ["medium", "hard"]:
            coord = self._random_checker_untried()
            if coord is not None:
                return coord

        # fallback ‚Äî —Å–ª—É—á–∞–π–Ω–æ
        return self._random_untried()

    def process_result(self, coord: Coordinate, hit: Optional[bool], ship_destroyed: bool) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞:
        - –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–µ—Ç–∫—É –≤ tried
        - –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç hit_sequence –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ü–µ–ª–∏
        - –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—Ö–æ—Ç—É
        """
        self.tried.add(coord)

        # Easy —É—Ä–æ–≤–µ–Ω—å - –Ω–∏–∫–∞–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–±–∏–≤–∞–Ω–∏—è
        if self.difficulty == "easy":
            return

        if hit:
            x, y = coord
            if self.first_hit is None:
                self.first_hit = coord
            self.last_hit = coord
            self.hit_sequence.append(coord)

            if ship_destroyed:
                # –∫–æ—Ä–∞–±–ª—å –¥–æ–±–∏—Ç ‚Äî –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ö–æ—Ç—ã
                self.reset_ship_hunt()
            else:
                # Hard —É—Ä–æ–≤–µ–Ω—å - –µ—Å–ª–∏ 2+ –ø–æ–ø–∞–¥–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥, –¥–æ–±–∏–≤–∞–µ–º –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏
                if self.difficulty == "hard" and len(self.hit_sequence) >= 2:
                    self.targets = self._get_direction_targets()
                else:
                    # Medium/Hard —É—Ä–æ–≤–Ω–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è
                    for nx, ny in self._neighbors(x, y):
                        if (nx, ny) not in self.tried and (nx, ny) not in self.targets:
                            self.targets.append((nx, ny))
        else:
            # –º–∏–º–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

    def _extract_ship_positions(self, enemy_board: List[List[str]]) -> None:
        """–î–ª—è hard —É—Ä–æ–≤–Ω—è - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"""
        self.ship_positions = set()
        for x in range(BOARD_SIZE):
            for y in range(BOARD_SIZE):
                if enemy_board[x][y] == "üö¢":
                    self.ship_positions.add((x, y))

    def _get_known_ship_position(self) -> Optional[Coordinate]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ä–∞–±–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–Ω–∞"""
        for coord in self.ship_positions:
            if coord not in self.tried:
                return coord
        return None

    def _get_direction_targets(self) -> List[Coordinate]:
        """
        –î–ª—è hard —É—Ä–æ–≤–Ω—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏ –∫–æ—Ä–∞–±–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤.
        –õ–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–∞—Ö–∏ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.
        """
        if len(self.hit_sequence) < 2:
            return []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤—ã–º –¥–≤—É–º –ø–æ–ø–∞–¥–∞–Ω–∏—è–º
        first = self.hit_sequence[0]
        second = self.hit_sequence[1]

        dx = second[0] - first[0]
        dy = second[1] - first[1]

        if dx != 0:
            dx //= abs(dx)
        if dy != 0:
            dy //= abs(dy)

        direction_targets = []

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –ª–∏–Ω–∏–∏
        hits_sorted = sorted(self.hit_sequence, key=lambda c: (c[0], c[1]))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –∫–æ–Ω—Ü–∞ –ª–∏–Ω–∏–∏ –∏ —É—á–∏—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–ø—Ä–æ–º–∞—Ö–∏)
        for end in [hits_sorted[0], hits_sorted[-1]]:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–Ω–∏–∏
            nx, ny = end
            while True:
                nx += dx
                ny += dy
                if not (0 <= nx < BOARD_SIZE and 0 <= ny < BOARD_SIZE):
                    break
                if (nx, ny) in self.tried:
                    # –µ—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç–∞ –∫–ª–µ—Ç–∫–∞ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
                    break
                if (nx, ny) not in direction_targets:
                    direction_targets.append((nx, ny))

            # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            nx, ny = end
            while True:
                nx -= dx
                ny -= dy
                if not (0 <= nx < BOARD_SIZE and 0 <= ny < BOARD_SIZE):
                    break
                if (nx, ny) in self.tried:
                    break
                if (nx, ny) not in direction_targets:
                    direction_targets.append((nx, ny))

        return direction_targets
