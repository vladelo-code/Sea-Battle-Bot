import random
from typing import List, Optional, Tuple

from app.game_logic import BOARD_SIZE

Coordinate = Tuple[int, int]


class BotAI:
    """
    –ö–ª–∞—Å—Å AI –±–æ—Ç–∞ –¥–ª—è –ú–æ—Ä—Å–∫–æ–≥–æ –±–æ—è —Å —Ç—Ä–µ–º—è —É—Ä–æ–≤–Ω—è–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: easy, medium, hard.
    –í —Ä–µ–∂–∏–º–µ hard –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:
    - —Å–ª—É—á–∞–π–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã,
    - —à–∞—Ö–º–∞—Ç–Ω–∞—è —Å—Ö–µ–º–∞,
    - "–∑–Ω–∞–Ω–∏–µ" –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∫–æ—Ä–∞–±–ª–µ–π (—á–∏—Ç–µ—Ä—Å—Ç–≤–æ).
    –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–±–∏–≤–∞–Ω–∏—è –∫–æ—Ä–∞–±–ª—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ª–∏–Ω–∏–∏.
    """

    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è hard —Ä–µ–∂–∏–º–∞
    CHEAT_PROBABILITY = 0.1  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–∏—Ç–µ—Ä—Å—Ç–≤–∞
    CHECKER_PROBABILITY = 0.5  # 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —à–∞—Ö–º–∞—Ç–Ω–æ–π —Å—Ö–µ–º—ã
    RANDOM_PROBABILITY = 0.4  # 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞

    def __init__(self, difficulty: str, enemy_board: Optional[List[List[str]]] = None):
        self.difficulty = difficulty  # easy | medium | hard
        self.tried: set[Coordinate] = set()
        self.targets: list[Coordinate] = []  # –∫–ª–µ—Ç–∫–∏ –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è
        self.first_hit: Optional[Coordinate] = None
        self.last_hit: Optional[Coordinate] = None
        self.ship_positions: set[Coordinate] = set()  # –¥–ª—è hard —É—Ä–æ–≤–Ω—è - "–∑–Ω–∞–Ω–∏–µ" –æ –∫–æ—Ä–∞–±–ª—è—Ö
        self.hit_sequence: list[Coordinate] = []  # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.ship_direction: Optional[str] = None  # 'horizontal' –∏–ª–∏ 'vertical' –¥–ª—è hard —Ä–µ–∂–∏–º–∞

        # –î–ª—è medium/hard ‚Äî –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –∫–ª–µ—Ç–∫–∏ –ø–æ ¬´—à–∞—Ö–º–∞—Ç–Ω–æ–π¬ª —Å—Ö–µ–º–µ
        self.checker_cells: list[Coordinate] = [
            (x, y) for x in range(BOARD_SIZE) for y in range(BOARD_SIZE)
            if (x + y) % 2 == 0
        ]
        random.shuffle(self.checker_cells)

        # –î–ª—è hard —É—Ä–æ–≤–Ω—è - "–∑–Ω–∞–µ–º" –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        if difficulty == "hard" and enemy_board is not None:
            self._extract_ship_positions(enemy_board)

    def reset_ship_hunt(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ö–æ—Ç—ã –Ω–∞ –∫–æ—Ä–∞–±–ª—å –ø–æ—Å–ª–µ –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è"""
        self.targets.clear()
        self.first_hit = None
        self.last_hit = None
        self.hit_sequence.clear()
        self.ship_direction = None

    def _neighbors(self, x: int, y: int) -> List[Coordinate]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ) –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è"""
        res: List[Coordinate] = []
        if x > 0:
            res.append((x - 1, y))
        if x < BOARD_SIZE - 1:
            res.append((x + 1, y))
        if y > 0:
            res.append((x, y - 1))
        if y < BOARD_SIZE - 1:
            res.append((x, y + 1))
        return res

    def _random_untried(self) -> Coordinate:
        """–°–ª—É—á–∞–π–Ω–∞—è –∫–ª–µ—Ç–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏"""
        candidates = [
            (x, y)
            for x in range(BOARD_SIZE)
            for y in range(BOARD_SIZE)
            if (x, y) not in self.tried
        ]
        return random.choice(candidates)

    def _random_checker_untried(self) -> Optional[Coordinate]:
        """–°–ª—É—á–∞–π–Ω–∞—è –∫–ª–µ—Ç–∫–∞ –ø–æ —à–∞—Ö–º–∞—Ç–Ω–æ–π —Å—Ö–µ–º–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏"""
        for coord in list(self.checker_cells):
            if coord not in self.tried:
                return coord
        return None

    def choose_shot(self) -> Coordinate:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–ª–µ—Ç–∫—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        # Easy —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã, –Ω–∏–∫–∞–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if self.difficulty == "easy":
            return self._random_untried()

        # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª–∏ –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è ‚Äî –±—å–µ–º —Ç—É–¥–∞
        if self.targets:
            return self.targets.pop(0)

        # 2. –î–ª—è hard —Ä–µ–∂–∏–º–∞ - –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
        if self.difficulty == "hard":
            return self._choose_hard_strategy()

        # 3. medium ‚Äî —à–∞—Ö–º–∞—Ç–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        if self.difficulty == "medium":
            coord = self._random_checker_untried()
            if coord is not None:
                return coord

        # 4. fallback ‚Äî —Å–ª—É—á–∞–π–Ω–æ
        return self._random_untried()

    def process_result(self, coord: Coordinate, hit: Optional[bool], ship_destroyed: bool) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞:
        - –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–µ—Ç–∫—É –≤ tried
        - –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç hit_sequence –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ü–µ–ª–∏
        - –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—Ö–æ—Ç—É
        """
        was_targeting_shot = coord in self.targets
        self.tried.add(coord)

        # Easy —É—Ä–æ–≤–µ–Ω—å - –Ω–∏–∫–∞–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–±–∏–≤–∞–Ω–∏—è
        if self.difficulty == "easy":
            return

        if hit:
            x, y = coord
            if self.first_hit is None:
                self.first_hit = coord
            self.last_hit = coord
            self.hit_sequence.append(coord)

            # –£–¥–∞–ª—è–µ–º –ø–æ–ø–∞–≤—à—É—é —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –±—ã–ª–∞
            if was_targeting_shot and coord in self.targets:
                self.targets.remove(coord)

            if ship_destroyed:
                # –∫–æ—Ä–∞–±–ª—å –¥–æ–±–∏—Ç ‚Äî –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ö–æ—Ç—ã
                self.reset_ship_hunt()
            else:
                if len(self.hit_sequence) == 1:
                    # –ü–µ—Ä–≤–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ 4 —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                    for nx, ny in self._neighbors(x, y):
                        if (nx, ny) not in self.tried and (nx, ny) not in self.targets:
                            self.targets.append((nx, ny))
                else:
                    # –í—Ç–æ—Ä–æ–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –≤–¥–æ–ª—å –ª–∏–Ω–∏–∏
                    self._update_targets_by_direction()
        else:
            # –ü—Ä–æ–º–∞—Ö
            if was_targeting_shot and coord in self.targets:
                self.targets.remove(coord)
            if self.hit_sequence:
                self._update_targets_after_miss(coord)

    def _extract_ship_positions(self, enemy_board: List[List[str]]) -> None:
        """–î–ª—è hard —É—Ä–æ–≤–Ω—è - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"""
        self.ship_positions = set()
        for x in range(BOARD_SIZE):
            for y in range(BOARD_SIZE):
                if enemy_board[x][y] == "üö¢":
                    self.ship_positions.add((x, y))

    def _get_known_ship_position(self) -> Optional[Coordinate]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ä–∞–±–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–Ω–∞"""
        for coord in self.ship_positions:
            if coord not in self.tried:
                return coord
        return None

    def _choose_hard_strategy(self) -> Coordinate:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è hard —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
        possible_coords: List[Coordinate] = []

        # –ß–∏—Ç–µ—Ä—Å—Ç–≤–æ
        if random.random() < self.CHEAT_PROBABILITY:
            cheat_coord = self._get_known_ship_position()
            if cheat_coord is not None:
                possible_coords.append(cheat_coord)

        # –®–∞—Ö–º–∞—Ç–Ω–∞—è —Å—Ö–µ–º–∞
        if random.random() < self.CHECKER_PROBABILITY:
            checker_coord = self._random_checker_untried()
            if checker_coord is not None:
                possible_coords.append(checker_coord)

        # –†–∞–Ω–¥–æ–º
        if random.random() < self.RANDOM_PROBABILITY:
            random_coord = self._random_untried()
            possible_coords.append(random_coord)

        if possible_coords:
            return random.choice(possible_coords)

        # Fallback
        return self._random_untried()

    def _update_targets_by_direction(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –¥–æ–±–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è"""
        if len(self.hit_sequence) < 2:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤—ã–º –¥–≤—É–º –ø–æ–ø–∞–¥–∞–Ω–∏—è–º
        first = self.hit_sequence[0]
        second = self.hit_sequence[1]

        dx = second[0] - first[0]
        dy = second[1] - first[1]

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        dx = 0 if dx == 0 else dx // abs(dx)
        dy = 0 if dy == 0 else dy // abs(dy)

        self.ship_direction = 'horizontal' if dx != 0 else 'vertical'

        self.targets.clear()

        if self.ship_direction == 'horizontal':
            y_coord = first[1]
            min_x = min(c[0] for c in self.hit_sequence)
            max_x = max(c[0] for c in self.hit_sequence)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
            for x in range(min_x - 1, -1, -1):
                coord = (x, y_coord)
                if coord not in self.tried:
                    self.targets.append(coord)
                else:
                    break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
            for x in range(max_x + 1, BOARD_SIZE):
                coord = (x, y_coord)
                if coord not in self.tried:
                    self.targets.append(coord)
                else:
                    break
        else:
            x_coord = first[0]
            min_y = min(c[1] for c in self.hit_sequence)
            max_y = max(c[1] for c in self.hit_sequence)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö
            for y in range(min_y - 1, -1, -1):
                coord = (x_coord, y)
                if coord not in self.tried:
                    self.targets.append(coord)
                else:
                    break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑
            for y in range(max_y + 1, BOARD_SIZE):
                coord = (x_coord, y)
                if coord not in self.tried:
                    self.targets.append(coord)
                else:
                    break

    def _update_targets_after_miss(self, missed_coord: Coordinate) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–º–∞—Ö–∞ –Ω–∞ –æ–¥–Ω–æ–º –∫–æ–Ω—Ü–µ –ª–∏–Ω–∏–∏:
        - –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –Ω–∞ –∫—Ä–∞—é –ª–∏–Ω–∏–∏, –±–æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.
        - –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö –≥–¥–µ-—Ç–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ ‚Äî –±–æ—Ç –Ω–µ –º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é.
        """
        if not self.hit_sequence or not self.ship_direction:
            return

        self.targets.clear()

        if self.ship_direction == 'horizontal':
            y_coord = self.hit_sequence[0][1]
            min_x = min(c[0] for c in self.hit_sequence)
            max_x = max(c[0] for c in self.hit_sequence)

            # –ü—Ä–æ–º–∞—Ö —Å–ª–µ–≤–∞ ‚Üí –∏–¥–µ–º –≤–ø—Ä–∞–≤–æ
            if missed_coord[0] <= min_x:
                for x in range(max_x + 1, BOARD_SIZE):
                    coord = (x, y_coord)
                    if coord not in self.tried:
                        self.targets.append(coord)
                        break
            # –ü—Ä–æ–º–∞—Ö —Å–ø—Ä–∞–≤–∞ ‚Üí –∏–¥–µ–º –≤–ª–µ–≤–æ
            elif missed_coord[0] >= max_x:
                for x in range(min_x - 1, -1, -1):
                    coord = (x, y_coord)
                    if coord not in self.tried:
                        self.targets.append(coord)
                        break

        else:  # vertical
            x_coord = self.hit_sequence[0][0]
            min_y = min(c[1] for c in self.hit_sequence)
            max_y = max(c[1] for c in self.hit_sequence)

            # –ü—Ä–æ–º–∞—Ö —Å–≤–µ—Ä—Ö—É ‚Üí –∏–¥–µ–º –≤–Ω–∏–∑
            if missed_coord[1] <= min_y:
                for y in range(max_y + 1, BOARD_SIZE):
                    coord = (x_coord, y)
                    if coord not in self.tried:
                        self.targets.append(coord)
                        break
            # –ü—Ä–æ–º–∞—Ö —Å–Ω–∏–∑—É ‚Üí –∏–¥–µ–º –≤–≤–µ—Ä—Ö
            elif missed_coord[1] >= max_y:
                for y in range(min_y - 1, -1, -1):
                    coord = (x_coord, y)
                    if coord not in self.tried:
                        self.targets.append(coord)
                        break
