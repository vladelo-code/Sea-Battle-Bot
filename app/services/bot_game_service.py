import asyncio
from typing import Optional
from aiogram.types import Message, ReplyKeyboardRemove

from app.state.in_memory import games
from app.game_logic import create_empty_board, place_all_ships, process_shot, check_victory, print_board
from app.utils.game_id import generate_game_id
from app.utils.none_username import safe_username
from app.keyboards import enemy_board_keyboard, after_game_menu
from app.services.bot_ai import BotAI
from app.logger import setup_logger
from app.messages.texts import (
    SUCCESSFUL_SHOT, BAD_SHOT, YOUR_BOARD_TEXT_AFTER_SUCCESS_SHOT, YOUR_BOARD_TEXT_AFTER_BAD_SHOT,
    WINNER, LOSER, AD_AFTER_GAME
)

logger = setup_logger(__name__)


def start_bot_game(user_id: int, username: Optional[str], difficulty: str) -> str:
    # –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫–∏
    human_board = create_empty_board()
    bot_board = create_empty_board()
    place_all_ships(human_board)
    place_all_ships(bot_board)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É
    game_id = generate_game_id()
    bot_id = -abs(hash((user_id, game_id)))  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –±–æ—Ç–∞ –≤ –ø–∞–º—è—Ç–∏

    games[game_id] = {
        "player1": user_id,
        "player2": bot_id,
        "bot_id": bot_id,
        "is_bot_game": True,
        "difficulty": difficulty,
        "boards": {user_id: human_board, bot_id: bot_board},
        "turn": user_id,
        "usernames": {
            user_id: safe_username(username, "–ò–≥—Ä–æ–∫"),
            bot_id: "vladelo_sea_battle_bot",
        },
        "message_ids": {},
        "bot_state": {
            "ai": BotAI(difficulty, human_board),
        },
    }

    logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º. –ò–≥—Ä–æ–∫ @{username}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}, game_id={game_id}")
    return game_id


async def handle_player_shot_vs_bot(message: Message) -> None:
    user_id = message.from_user.id

    # –ù–∞–π–¥–µ–º –∏–≥—Ä—É —Å –±–æ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    game_id: Optional[str] = None
    for gid, g in games.items():
        if g.get("is_bot_game") and (g.get("player1") == user_id or g.get("player2") == user_id):
            game_id = gid
            break

    if not game_id or game_id not in games:
        await message.answer("‚ùó –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    game = games[game_id]
    bot_id = game["bot_id"]

    if game["turn"] != user_id:
        await message.answer("‚ùó –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    # –ü–∞—Ä—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    try:
        coord = message.text.upper()
        x = ord(coord[0]) - ord('A')
        y = int(coord[1:]) - 1
        if not (0 <= x < 10 and 0 <= y < 10):
            raise ValueError
    except Exception:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç A1.")
        return

    # –ò–≥—Ä–æ–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç –ø–æ –¥–æ—Å–∫–µ –±–æ—Ç–∞
    bot_board = game["boards"][bot_id]
    hit = process_shot(bot_board, x, y)

    if check_victory(bot_board):
        # –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
        games.pop(game_id, None)
        await message.bot.send_message(user_id, WINNER.format(username="vladelo_sea_battle_bot"), parse_mode="html",
                                       reply_markup=ReplyKeyboardRemove())
        await message.bot.send_message(user_id, AD_AFTER_GAME, parse_mode="html", disable_web_page_preview=True,
                                       reply_markup=after_game_menu())
        return

    if hit:
        msg = await message.bot.send_message(
            chat_id=user_id,
            text=SUCCESSFUL_SHOT,
            parse_mode="html",
            reply_markup=enemy_board_keyboard(game_id, bot_id)
        )
    else:
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞ –±–æ—Ç—É
        game["turn"] = bot_id

        msg = await message.bot.send_message(
            chat_id=user_id,
            text=BAD_SHOT,
            parse_mode="html",
            reply_markup=enemy_board_keyboard(game_id, bot_id)
        )

        # –•–æ–¥ –±–æ—Ç–∞ (–ø–æ–∫–∞ —Ö–æ–¥ –Ω–µ –≤–µ—Ä–Ω–µ—Ç—Å—è –∏–≥—Ä–æ–∫—É –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è)
        await _bot_turn_loop(message, game_id)

    # –û–±–Ω–æ–≤–∏–º message_ids
    game.setdefault("message_ids", {})
    game["message_ids"][user_id] = msg.message_id


async def _bot_turn_loop(message: Message, game_id: str) -> None:
    game = games.get(game_id)
    if not game:
        return

    user_id = game["player1"] if game["player1"] != game["bot_id"] else game["player2"]
    bot_id = game["bot_id"]
    ai: BotAI = game["bot_state"]["ai"]

    human_board = game["boards"][user_id]

    while game["turn"] == bot_id:
        x, y = ai.choose_shot()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
        board_before = [row[:] for row in human_board]
        result = process_shot(human_board, x, y)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
        ship_destroyed = False
        if result:  # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ "‚ùå" –≤–æ–∫—Ä—É–≥ –ø–æ–ø–∞–¥–∞–Ω–∏—è (–ø—Ä–∏–∑–Ω–∞–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è)
            for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:
                nx, ny = x + dx, y + dy
                if (0 <= nx < 10 and 0 <= ny < 10 and 
                    board_before[nx][ny] == "‚¨ú" and human_board[nx][ny] == "‚ùå"):
                    ship_destroyed = True
                    break
        
        ai.process_result((x, y), result, ship_destroyed)
        await asyncio.sleep(0.9)
        if result is True:
            # –ü–æ –∏–≥—Ä–æ–∫—É –ø–æ–ø–∞–ª–∏ ‚Äî –±–æ—Ç —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞
            await message.bot.send_message(
                chat_id=user_id,
                text=YOUR_BOARD_TEXT_AFTER_SUCCESS_SHOT.format(board=print_board(human_board)),
                parse_mode="html",
                reply_markup=enemy_board_keyboard(game_id, bot_id)
            )

            if check_victory(human_board):
                games.pop(game_id, None)
                await message.bot.send_message(user_id, LOSER.format(username="vladelo_sea_battle_bot"),
                                               parse_mode="html",
                                               reply_markup=ReplyKeyboardRemove())
                await message.bot.send_message(user_id, AD_AFTER_GAME, parse_mode="html",
                                               disable_web_page_preview=True, reply_markup=after_game_menu())
                return

        elif result is False:
            # –ú–∏–º–æ ‚Äî —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫—É
            game["turn"] = user_id
            await message.bot.send_message(
                chat_id=user_id,
                text=YOUR_BOARD_TEXT_AFTER_BAD_SHOT.format(board=print_board(human_board)),
                parse_mode="html",
                reply_markup=enemy_board_keyboard(game_id, bot_id)
            )
            break
        else:
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            game["turn"] = bot_id


async def handle_surrender_vs_bot(message: Message) -> None:
    user_id = message.from_user.id
    game_id: Optional[str] = None
    for gid, g in games.items():
        if g.get("is_bot_game") and (g.get("player1") == user_id or g.get("player2") == user_id):
            game_id = gid
            break

    if not game_id or game_id not in games:
        await message.answer("‚ùó –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    games.pop(game_id, None)

    await message.bot.send_message(
        user_id,
        "üè≥Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã —Å–¥–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞!",
        parse_mode="html",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.bot.send_message(
        user_id,
        AD_AFTER_GAME,
        parse_mode="html",
        disable_web_page_preview=True,
        reply_markup=after_game_menu()
    )
