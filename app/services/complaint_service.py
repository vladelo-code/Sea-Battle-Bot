import asyncio
from typing import Optional
from aiogram import Bot
from aiogram.types import ReplyKeyboardRemove

from app.state.in_memory import games, complaint_timers
from app.keyboards import after_game_menu
from app.db_utils.match import update_match_result
from app.db_utils.stats import update_stats_after_match
from app.dependencies import db_session
from app.services.achievements_service import evaluate_achievements_after_multiplayer_match
from app.logger import setup_logger
from app.messages.texts import (
    COMPLAINT_STARTED, COMPLAINT_NOTIFICATION, COMPLAINT_TIMER_CANCELLED,
    COMPLAINT_AUTO_WIN, COMPLAINT_AUTO_LOSS, COMPLAINT_ALREADY_ACTIVE,
    COMPLAINT_NOT_YOUR_TURN, AD_AFTER_GAME, COMPLAINT_TIMER_CANCELLED_OPPONENT
)

logger = setup_logger(__name__)


async def handle_complaint(bot: Bot, user_id: int) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–∞–ª–æ–±—É –Ω–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞.
    
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    :param user_id: ID –∏–≥—Ä–æ–∫–∞, –ø–æ–¥–∞—é—â–µ–≥–æ –∂–∞–ª–æ–±—É
    :return: True –µ—Å–ª–∏ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞, False –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    """
    # –ù–∞–π–¥–µ–º –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–∞–µ—Ç user_id
    game_id: Optional[str] = None
    for gid, g in games.items():
        if user_id == g.get("player1") or user_id == g.get("player2"):
            game_id = gid
            break

    if not game_id or game_id not in games:
        return False

    game = games[game_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
    if game.get("is_bot_game"):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ —Ö–æ–¥ –∂–∞–ª—É—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    if game["turn"] == user_id:
        await bot.send_message(user_id, COMPLAINT_NOT_YOUR_TURN, parse_mode="HTML")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–∞–ª–æ–±–∞ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    if game_id in complaint_timers:
        await bot.send_message(user_id, COMPLAINT_ALREADY_ACTIVE, parse_mode="HTML")
        return False

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    opponent_id = game["player1"] if user_id == game["player2"] else game["player2"]

    # –ü–æ–ª—É—á–∞–µ–º username'—ã
    usernames = game.get("usernames", {})
    complainer_username = usernames.get(user_id, "–ò–≥—Ä–æ–∫")
    opponent_username = usernames.get(opponent_id, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫")

    logger.info(f'‚ö†Ô∏è –ò–≥—Ä–æ–∫ @{complainer_username} –ø–æ–¥–∞–ª –∂–∞–ª–æ–±—É –Ω–∞ @{opponent_username}, ID –∏–≥—Ä—ã: {game_id}')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await bot.send_message(user_id, COMPLAINT_STARTED, parse_mode="HTML")
    await bot.send_message(opponent_id, COMPLAINT_NOTIFICATION, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    timer_task = asyncio.create_task(complaint_timer(bot, game_id, user_id, opponent_id))
    complaint_timers[game_id] = timer_task

    return True


async def complaint_timer(bot: Bot, game_id: str, complainer_id: int, opponent_id: int) -> None:
    """
    –¢–∞–π–º–µ—Ä –∂–∞–ª–æ–±—ã - –∂–¥–µ—Ç 5 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –ø–æ–ª—å–∑—É –∂–∞–ª—É—é—â–µ–≥–æ—Å—è.
    
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param game_id: ID –∏–≥—Ä—ã
    :param complainer_id: ID –∂–∞–ª—É—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    :param opponent_id: ID –∏–≥—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–∞–ª—É—é—Ç—Å—è
    """
    try:
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(300)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if game_id not in games:
            return

        game = games[game_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–∞–ª–æ–±–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ (–∏–≥—Ä–æ–∫ –Ω–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥)
        if game_id in complaint_timers:
            await auto_win_by_complaint(bot, game_id, complainer_id, opponent_id)

    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω (–∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥)
        logger.info(f'‚è∞ –¢–∞–π–º–µ—Ä –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –∏–≥—Ä—ã {game_id}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –∂–∞–ª–æ–±—ã –¥–ª—è –∏–≥—Ä—ã {game_id}: {e}')


async def cancel_complaint_timer(game_id: str) -> bool:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –∂–∞–ª–æ–±—ã (–∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥).
    :return: True –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç–º–µ–Ω—ë–Ω, –∏–Ω–∞—á–µ False.
    """
    if game_id in complaint_timers:
        timer_task = complaint_timers.pop(game_id)
        timer_task.cancel()
        return True
    return False


async def notify_complaint_cancelled(bot: Bot, game_id: str, current_player_id: int) -> None:
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∂–∞–ª—É—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –∂–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.
    
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param game_id: ID –∏–≥—Ä—ã
    :param current_player_id: ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–µ–ª–∞–ª —Ö–æ–¥
    """
    if game_id not in games:
        return

    game = games[game_id]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∞–ª—É—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ç–æ–≥–æ, –∫—Ç–æ —Å–¥–µ–ª–∞–ª —Ö–æ–¥)
    complainer_id = game["player1"] if current_player_id == game["player2"] else game["player2"]

    await bot.send_message(complainer_id, COMPLAINT_TIMER_CANCELLED, parse_mode="HTML")
    await bot.send_message(current_player_id, COMPLAINT_TIMER_CANCELLED_OPPONENT, parse_mode="HTML")


async def auto_win_by_complaint(bot: Bot, game_id: str, winner_id: int, loser_id: int) -> None:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –ø–æ–ª—å–∑—É –∂–∞–ª—É—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞.
    
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param game_id: ID –∏–≥—Ä—ã
    :param winner_id: ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–∂–∞–ª—É—é—â–µ–≥–æ—Å—è)
    :param loser_id: ID –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    """
    if game_id not in games:
        return

    game = games[game_id]
    usernames = game.get("usernames", {})
    winner_username = usernames.get(winner_id, "–ò–≥—Ä–æ–∫")
    loser_username = usernames.get(loser_id, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫")

    logger.info(f'üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞ @{winner_username} –ø–æ –∂–∞–ª–æ–±–µ, ID –∏–≥—Ä—ã: {game_id}')

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with db_session() as db:
        match = update_match_result(db, game_id, winner_id=winner_id, result="complaint")
        update_stats_after_match(db, winner_id=winner_id, loser_id=loser_id)
        try:
            if match:
                evaluate_achievements_after_multiplayer_match(db, match)
        except Exception:
            pass

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    winner_board = game["boards"].get(winner_id)
    loser_board = game["boards"].get(loser_id)

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏ —Ç–∞–π–º–µ—Ä
    games.pop(game_id, None)
    complaint_timers.pop(game_id, None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(
        winner_id,
        COMPLAINT_AUTO_WIN,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    await bot.send_message(
        winner_id,
        text=AD_AFTER_GAME,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=after_game_menu()
    )

    await bot.send_message(
        loser_id,
        COMPLAINT_AUTO_LOSS,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    await bot.send_message(
        loser_id,
        text=AD_AFTER_GAME,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=after_game_menu()
    )
