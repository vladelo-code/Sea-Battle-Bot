from aiogram.types import Message

from app.state.in_memory import games
from app.game_logic import print_board, process_shot, check_victory
from app.db_utils.match import update_match_result
from app.db_utils.stats import update_stats_after_match
from app.dependencies import db_session
from app.keyboards import main_menu, enemy_board_keyboard
from app.logger import setup_logger

from app.messages.texts import (
    YOUR_BOARD_TEXT_AFTER_SHOT
)

logger = setup_logger(__name__)


async def handle_surrender(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ù–∞–π–¥–µ–º –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–∞–µ—Ç user_id
    game_id = None
    for gid, g in games.items():
        if user_id == g.get("player1") or user_id == g.get("player2"):
            game_id = gid
            break

    if not game_id or game_id not in games:
        await message.answer("‚ùó –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    game = games[game_id]
    player1 = game["player1"]
    player2 = game["player2"]
    opponent_id = player2 if user_id == player1 else player1

    logger.info(f'üè≥Ô∏è –ò–≥—Ä–æ–∫ @{username} —Å–¥–∞–ª—Å—è, ID –∏–≥—Ä—ã: {game_id}')

    with db_session() as db:
        update_match_result(db, game_id, winner_id=opponent_id, result="surrender")
        update_stats_after_match(db, winner_id=opponent_id, loser_id=user_id)

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏ –≤—Å–µ —Å–≤—è–∑–∏
    games.pop(game_id, None)

    await message.bot.send_message(user_id, "üè≥Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã —Å–¥–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ!", reply_markup=main_menu())
    await message.bot.send_message(opponent_id, "üéâ –ü–æ–±–µ–¥–∞! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–∞–ª—Å—è!", reply_markup=main_menu())


async def handle_shot(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ù–∞–π–¥–µ–º –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–∞–µ—Ç user_id
    game_id = None
    for gid, g in games.items():
        if user_id == g.get("player1") or user_id == g.get("player2"):
            game_id = gid
            break

    if not game_id or game_id not in games:
        await message.answer("‚ùó –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    game = games[game_id]

    if user_id != game["turn"]:
        await message.answer("‚ùó –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    try:
        coord = message.text.upper()
        x = ord(coord[0]) - ord('A')
        y = int(coord[1:]) - 1
        if not (0 <= x < 10 and 0 <= y < 10):
            raise ValueError
    except Exception:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç A1.")
        return

    opponent_id = game["player1"] if game["turn"] == game["player2"] else game["player2"]
    board = game["boards"][opponent_id]
    hit = process_shot(board, x, y)

    if check_victory(board):
        with db_session() as db:
            update_match_result(db, game_id, winner_id=user_id, result="normal")
            update_stats_after_match(db, winner_id=user_id, loser_id=opponent_id)

        games.pop(game_id, None)

        await message.answer("üéâ –ü–æ–±–µ–¥–∞! –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!", reply_markup=main_menu())
        await message.bot.send_message(
            opponent_id,
            f"üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—Å–µ –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.\n–ü–æ–±–µ–¥–∏–ª @{username}!",
            reply_markup=main_menu()
        )
        return

    if hit:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª—è–≤—à–µ–º—É
        msg1 = await message.bot.send_message(
            chat_id=user_id,
            text="üí• <b>–ü–æ–ø–∞–¥–∞–Ω–∏–µ!</b> –°—Ç—Ä–µ–ª—è–π—Ç–µ –µ—â—ë!",
            parse_mode="html",
            reply_markup=enemy_board_keyboard(game_id, opponent_id)
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        await message.bot.delete_message(
            chat_id=opponent_id,
            message_id=game.get("message_ids", {}).get(opponent_id, 0)
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
        msg2 = await message.bot.send_message(
            chat_id=opponent_id,
            text="üî• <b>–ü–æ –≤–∞–º –ø–æ–ø–∞–ª–∏!</b>\n" + YOUR_BOARD_TEXT_AFTER_SHOT.format(
                board=print_board(board)) + "\n‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!</b>",
            parse_mode="html",
            reply_markup=enemy_board_keyboard(game_id, user_id)
        )

    else:
        # –ú–µ–Ω—è–µ–º —Ö–æ–¥
        game["turn"] = opponent_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª—è–≤—à–µ–º—É
        msg1 = await message.bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–ú–∏–º–æ!</b> –¢–µ–ø–µ—Ä—å —Ö–æ–¥–∏—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫",
            parse_mode="html",
            reply_markup=enemy_board_keyboard(game_id, opponent_id)
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        await message.bot.delete_message(
            chat_id=opponent_id,
            message_id=game.get("message_ids", {}).get(opponent_id, 0)
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
        msg2 = await message.bot.send_message(
            chat_id=opponent_id,
            text=YOUR_BOARD_TEXT_AFTER_SHOT.format(board=print_board(board)) + "\nüéØ <b>–í–∞—à —Ö–æ–¥!</b>",
            parse_mode="html",
            reply_markup=enemy_board_keyboard(game_id, user_id)
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º message_ids –≤ –∏–≥—Ä–µ
    game.setdefault("message_ids", {})
    game["message_ids"][user_id] = msg1.message_id
    game["message_ids"][opponent_id] = msg2.message_id
