from aiogram.types import Message, ReplyKeyboardRemove

from app.storage import get_game, get_board, switch_turn, get_turn, delete_game, current_games
from app.game_logic import print_board, process_shot, check_victory
from app.db_utils.match import update_match_result
from app.db_utils.stats import update_stats_after_match
from app.dependencies import get_db
from app.keyboards import main_menu, playing_menu
from app.logger import setup_logger

logger = setup_logger(__name__)


async def handle_surrender(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    game_id = str(current_games.get(user_id))

    if not game_id or not get_game(game_id):
        await message.answer("‚ùó –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    game = get_game(game_id)
    opponent_id = game["player1"] if game["turn"] == game["player2"] else game["player2"]

    logger.info(f'üè≥Ô∏è –ò–≥—Ä–æ–∫ @{username} —Å–¥–∞–ª—Å—è, ID –∏–≥—Ä—ã: {game_id}')

    db_gen = get_db()
    db = next(db_gen)
    try:
        update_match_result(db, game_id, winner_id=opponent_id, result="surrender")
        update_stats_after_match(db, winner_id=opponent_id, loser_id=user_id)
    finally:
        db_gen.close()

    current_games.pop(user_id, None)
    current_games.pop(opponent_id, None)
    delete_game(game_id)

    await message.answer("üè≥Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã —Å–¥–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ!", reply_markup=main_menu())
    await message.bot.send_message(opponent_id, "üéâ –ü–æ–±–µ–¥–∞! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–∞–ª—Å—è!", reply_markup=main_menu())


async def handle_shot(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    game_id = str(current_games.get(user_id))

    if not game_id or not get_game(game_id):
        await message.answer("‚ùó –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    game = get_game(game_id)

    if user_id != get_turn(game_id):
        await message.answer("‚ùó –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    try:
        coord = message.text.upper()
        x = ord(coord[0]) - ord('A')
        y = int(coord[1:]) - 1
        if not (0 <= x < 10 and 0 <= y < 10):
            raise ValueError
    except Exception:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç A1.")
        return

    opponent_id = game["player1"] if game["turn"] == game["player2"] else game["player2"]
    board = get_board(game_id, opponent_id)
    hit = process_shot(board, x, y)

    if check_victory(board):
        db_gen = get_db()
        db = next(db_gen)
        try:
            update_match_result(db, game_id, winner_id=user_id, result="normal")
            update_stats_after_match(db, winner_id=user_id, loser_id=opponent_id)
        finally:
            db_gen.close()

        current_games.pop(user_id, None)
        current_games.pop(opponent_id, None)
        delete_game(game_id)

        await message.answer("üéâ –ü–æ–±–µ–¥–∞! –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!", reply_markup=main_menu())
        await message.bot.send_message(
            opponent_id,
            f"üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—Å–µ –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.\n–ü–æ–±–µ–¥–∏–ª @{username}!",
            reply_markup=main_menu()
        )
        return

    switch_turn(game_id)

    result = "üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!" if hit else "‚ùå –ú–∏–º–æ!"
    board_view = print_board(board, hide_ships=True)

    await message.answer(
        f"{result}\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{board_view}\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞!",
        parse_mode="html",
        reply_markup=ReplyKeyboardRemove()
    )

    await message.bot.send_message(
        opponent_id,
        f"–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω.\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤—ã—Å—Ç—Ä–µ–ª–∞:\n{board_view}\n–í–∞—à —Ö–æ–¥!",
        parse_mode="html",
        reply_markup=playing_menu(game_id, user_id)
    )
